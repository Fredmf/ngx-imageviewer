import { ResourceLoader } from './imageviewer.model';
export class PdfResourceLoader extends ResourceLoader {
    constructor(_imageCache) {
        super();
        this._imageCache = _imageCache;
        if (typeof window !== 'undefined' && 'Worker' in window) {
            if (pdfjsLib && pdfjsLib.GlobalWorkerOptions && !pdfjsLib.GlobalWorkerOptions.workerSrc) {
                pdfjsLib.GlobalWorkerOptions.workerSrc = pdfjsWorker;
            }
        }
        this.showItemsQuantity = true;
    }
    setUp() {
        const vm = this;
        if (vm.loading || !vm.src) {
            return;
        }
        const loadingTask = pdfjsLib.getDocument(vm.src);
        vm.loading = true;
        vm.currentItem = 1;
        loadingTask.then((pdf) => {
            vm._pdf = pdf;
            vm.totalItem = pdf.numPages;
            vm.loaded = true;
            vm.loadResource();
        }, (reason) => {
            console.error(reason);
        });
    }
    loadResource() {
        const vm = this;
        if (!vm.loaded) {
            vm._pendingReload = true;
            return;
        }
        vm.loaded = false;
        const url = vm.src;
        const page = vm.currentItem;
        vm._pdf.getPage(page).then((pdfPage) => {
            vm._page = pdfPage;
            vm.loadImage(url, page, () => {
                vm.loaded = true;
                vm.loading = false;
                if (vm._pendingReload) {
                    vm._pendingReload = false;
                    vm.loadResource();
                }
                else {
                    vm.resourceChange.next();
                }
            });
        });
    }
    loadImage(src, page, onFinish) {
        const vm = this;
        const cacheimg = vm._imageCache.getImage(src, page);
        if (cacheimg) {
            vm._image = cacheimg;
            onFinish();
            return;
        }
        const canvas = document.createElement('canvas');
        const context = canvas.getContext('2d');
        const pageVp = vm._page.getViewport(2);
        canvas.width = pageVp.width;
        canvas.height = pageVp.height;
        const renderContext = {
            canvasContext: context,
            viewport: pageVp
        };
        const renderTask = vm._page.render(renderContext);
        renderTask.then(function () {
            canvas.toBlob(blob => {
                const img = new Image();
                img.onload = onFinish;
                img.src = URL.createObjectURL(blob);
                vm._imageCache.saveImage(src, page, img);
                vm._image = img;
            });
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGRmLmxvYWRlci5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS90cmF2aXMvYnVpbGQvZW1henY3Mi9uZ3gtaW1hZ2V2aWV3ZXIvcHJvamVjdHMvbmd4LWltYWdldmlld2VyL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9wZGYubG9hZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQTRCLE1BQU0scUJBQXFCLENBQUM7QUFRL0UsTUFBTSxPQUFPLGlCQUFrQixTQUFRLGNBQWM7SUFLbkQsWUFBb0IsV0FBOEI7UUFDaEQsS0FBSyxFQUFFLENBQUM7UUFEVSxnQkFBVyxHQUFYLFdBQVcsQ0FBbUI7UUFFaEQsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLElBQUksUUFBUSxJQUFJLE1BQU0sRUFBRTtZQUN2RCxJQUFJLFFBQVEsSUFBSSxRQUFRLENBQUMsbUJBQW1CLElBQUksQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsU0FBUyxFQUFFO2dCQUN2RixRQUFRLENBQUMsbUJBQW1CLENBQUMsU0FBUyxHQUFHLFdBQVcsQ0FBQzthQUN0RDtTQUNGO1FBQ0QsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQztJQUNoQyxDQUFDO0lBRUQsS0FBSztRQUNILE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQztRQUNoQixJQUFJLEVBQUUsQ0FBQyxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFO1lBQUUsT0FBTztTQUFFO1FBQ3RDLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pELEVBQUUsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLEVBQUUsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFxQixFQUFFLEVBQUU7WUFDekMsRUFBRSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7WUFD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QUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQ3pDLEVBQUUsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO1lBQ2xCLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXNvdXJjZUxvYWRlciwgRGltZW5zaW9uLCB0b1NxdWFyZUFuZ2xlIH0gZnJvbSAnLi9pbWFnZXZpZXdlci5tb2RlbCc7XG5pbXBvcnQgeyBJbWFnZUNhY2hlU2VydmljZSB9IGZyb20gJy4vaW1hZ2VjYWNoZS5zZXJ2aWNlJztcbmltcG9ydCB7IEltYWdlVmlld2VyQ29uZmlnIH0gZnJvbSAnLi9pbWFnZXZpZXdlci5jb25maWcnO1xuaW1wb3J0IHsgUERGSlNTdGF0aWMsIFBERkRvY3VtZW50UHJveHksIFBERlBhZ2VQcm94eSB9IGZyb20gJ3BkZmpzLWRpc3QnO1xuXG5kZWNsYXJlIHZhciBwZGZqc0xpYjogYW55O1xuZGVjbGFyZSB2YXIgcGRmanNXb3JrZXI6IGFueTtcblxuZXhwb3J0IGNsYXNzIFBkZlJlc291cmNlTG9hZGVyIGV4dGVuZHMgUmVzb3VyY2VMb2FkZXIge1xuICBwcml2YXRlIF9wZGY6IFBERkRvY3VtZW50UHJveHk7XG4gIHByaXZhdGUgX3BhZ2U6IFBERlBhZ2VQcm94eTtcbiAgcHJpdmF0ZSBfcGVuZGluZ1JlbG9hZDogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9pbWFnZUNhY2hlOiBJbWFnZUNhY2hlU2VydmljZSkge1xuICAgIHN1cGVyKCk7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmICdXb3JrZXInIGluIHdpbmRvdykge1xuICAgICAgaWYgKHBkZmpzTGliICYmIHBkZmpzTGliLkdsb2JhbFdvcmtlck9wdGlvbnMgJiYgIXBkZmpzTGliLkdsb2JhbFdvcmtlck9wdGlvbnMud29ya2VyU3JjKSB7XG4gICAgICAgIHBkZmpzTGliLkdsb2JhbFdvcmtlck9wdGlvbnMud29ya2VyU3JjID0gcGRmanNXb3JrZXI7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuc2hvd0l0ZW1zUXVhbnRpdHkgPSB0cnVlO1xuICB9XG5cbiAgc2V0VXAoKSB7XG4gICAgY29uc3Qgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5sb2FkaW5nIHx8ICF2bS5zcmMpIHsgcmV0dXJuOyB9XG4gICAgY29uc3QgbG9hZGluZ1Rhc2sgPSBwZGZqc0xpYi5nZXREb2N1bWVudCh2bS5zcmMpO1xuICAgIHZtLmxvYWRpbmcgPSB0cnVlO1xuICAgIHZtLmN1cnJlbnRJdGVtID0gMTtcbiAgICBsb2FkaW5nVGFzay50aGVuKChwZGY6IFBERkRvY3VtZW50UHJveHkpID0+IHtcbiAgICAgIHZtLl9wZGYgPSBwZGY7XG4gICAgICB2bS50b3RhbEl0ZW0gPSBwZGYubnVtUGFnZXM7XG4gICAgICB2bS5sb2FkZWQgPSB0cnVlO1xuICAgICAgdm0ubG9hZFJlc291cmNlKCk7XG4gICAgfSwgKHJlYXNvbjogc3RyaW5nKSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKHJlYXNvbik7XG4gICAgfSk7XG4gIH1cblxuICBsb2FkUmVzb3VyY2UoKSB7XG4gICAgY29uc3Qgdm0gPSB0aGlzO1xuICAgIGlmICghdm0ubG9hZGVkKSB7XG4gICAgICB2bS5fcGVuZGluZ1JlbG9hZCA9IHRydWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZtLmxvYWRlZCA9IGZhbHNlO1xuICAgIGNvbnN0IHVybCA9IHZtLnNyYztcbiAgICBjb25zdCBwYWdlID0gdm0uY3VycmVudEl0ZW07XG5cbiAgICB2bS5fcGRmLmdldFBhZ2UocGFnZSkudGhlbigocGRmUGFnZSkgPT4ge1xuICAgICAgdm0uX3BhZ2UgPSBwZGZQYWdlO1xuICAgICAgdm0ubG9hZEltYWdlKHVybCwgcGFnZSwgKCkgPT4ge1xuICAgICAgICB2bS5sb2FkZWQgPSB0cnVlO1xuICAgICAgICB2bS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgIGlmICh2bS5fcGVuZGluZ1JlbG9hZCkge1xuICAgICAgICAgIHZtLl9wZW5kaW5nUmVsb2FkID0gZmFsc2U7XG4gICAgICAgICAgdm0ubG9hZFJlc291cmNlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdm0ucmVzb3VyY2VDaGFuZ2UubmV4dCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgbG9hZEltYWdlKHNyYzogc3RyaW5nLCBwYWdlOiBudW1iZXIsIG9uRmluaXNoOiAoKSA9PiB2b2lkKSB7XG4gICAgY29uc3Qgdm0gPSB0aGlzO1xuICAgIGNvbnN0IGNhY2hlaW1nID0gdm0uX2ltYWdlQ2FjaGUuZ2V0SW1hZ2Uoc3JjLCBwYWdlKTtcbiAgICBpZiAoY2FjaGVpbWcpIHtcbiAgICAgIHZtLl9pbWFnZSA9IGNhY2hlaW1nO1xuICAgICAgb25GaW5pc2goKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGNvbnN0IHBhZ2VWcCA9IHZtLl9wYWdlLmdldFZpZXdwb3J0KDIpO1xuXG4gICAgY2FudmFzLndpZHRoID0gcGFnZVZwLndpZHRoO1xuICAgIGNhbnZhcy5oZWlnaHQgPSBwYWdlVnAuaGVpZ2h0O1xuXG4gICAgY29uc3QgcmVuZGVyQ29udGV4dCA9IHtcbiAgICAgIGNhbnZhc0NvbnRleHQ6IGNvbnRleHQsXG4gICAgICB2aWV3cG9ydDogcGFnZVZwXG4gICAgfTtcbiAgICBjb25zdCByZW5kZXJUYXNrID0gdm0uX3BhZ2UucmVuZGVyKHJlbmRlckNvbnRleHQpO1xuICAgIHJlbmRlclRhc2sudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICBjYW52YXMudG9CbG9iKGJsb2IgPT4ge1xuICAgICAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgaW1nLm9ubG9hZCA9IG9uRmluaXNoO1xuICAgICAgICBpbWcuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICAgICAgdm0uX2ltYWdlQ2FjaGUuc2F2ZUltYWdlKHNyYywgcGFnZSwgaW1nKTtcbiAgICAgICAgdm0uX2ltYWdlID0gaW1nO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==